// // // components/Booking.tsx
// // import React, { useState, useEffect } from 'react';
// // import { TableIcon, UsersIcon, ClockIcon, CalendarIcon, PlusIcon } from '@heroicons/react/outline';
// // import { AnimatePresence, motion } from 'framer-motion';
// // import * as XLSX from 'xlsx'; // For Excel manipulation (install with `npm install xlsx`)

// // interface Table {
// //   id: string;
// //   number: number;
// //   area: 'AC Premium' | 'Garden' | 'Bar';
// //   status: 'Available' | 'Occupied' | 'Running Table' | 'Printed Table' | 'Running KOT Table';
// //   capacity: number;
// //   reservation?: {
// //     time: string;
// //     customerName: string;
// //     phone: string;
// //   };
// // }

// // interface BookingData {
// //   tableNumber: number;
// //   area: string;
// //   customerName: string;
// //   phone: string;
// //   time: string;
// //   date: string;
// //   numberOfGuests: number;
// //   specialRequests: string;
// //   advanceAmount: number;
// //   bookingSource: string;
// //   email: string;
// // }

// // const initialTables: Table[] = [
// //   // AC Premium Section
// //   { id: 'ac1', number: 1, area: 'AC Premium', status: 'Available', capacity: 4 },
// //   { id: 'ac2', number: 2, area: 'AC Premium', status: 'Available', capacity: 6 },
// //   { id: 'ac3', number: 3, area: 'AC Premium', status: 'Available', capacity: 4 },
// //   { id: 'ac4', number: 4, area: 'AC Premium', status: 'Available', capacity: 6 },
// //   { id: 'ac5', number: 5, area: 'AC Premium', status: 'Available', capacity: 4 },
  
// //   // Garden Section
// //   { id: 'g1', number: 1, area: 'Garden', status: 'Available', capacity: 8 },
// //   { id: 'g2', number: 2, area: 'Garden', status: 'Available', capacity: 6 },
// //   { id: 'g3', number: 3, area: 'Garden', status: 'Available', capacity: 4 },
// //   { id: 'g4', number: 4, area: 'Garden', status: 'Available', capacity: 8 },
// //   { id: 'g5', number: 5, area: 'Garden', status: 'Available', capacity: 6 },
  
// //   // Bar Section
// //   { id: 'h1', number: 1, area: 'Bar', status: 'Available', capacity: 4 },
// //   { id: 'h2', number: 2, area: 'Bar', status: 'Available', capacity: 6 },
// //   { id: 'h3', number: 3, area: 'Bar', status: 'Available', capacity: 4 },
// //   { id: 'h4', number: 4, area: 'Bar', status: 'Available', capacity: 6 },
// //   { id: 'h5', number: 5, area: 'Bar', status: 'Available', capacity: 4 },
// // ];

// // const statusColors = {
// //   Available: 'bg-emerald-50 border-emerald-500 text-emerald-700 hover:bg-emerald-100',
// //   Occupied: 'bg-red-50 border-red-500 text-red-700 hover:bg-red-100',
// //   'Running Table': 'bg-blue-50 border-blue-500 text-blue-700 hover:bg-blue-100',
// //   'Printed Table': 'bg-purple-50 border-purple-500 text-purple-700 hover:bg-purple-100',
// //   'Running KOT Table': 'bg-amber-50 border-amber-500 text-amber-700 hover:bg-amber-100'
// // };

// // const Booking: React.FC = () => {
// //   const [tables, setTables] = useState<Table[]>(initialTables);
// //   const [selectedTable, setSelectedTable] = useState<Table | null>(null);
// //   const [bookingForm, setBookingForm] = useState<BookingData>({
// //     tableNumber: 0,
// //     area: '',
// //     customerName: '',
// //     phone: '',
// //     time: '',
// //     date: new Date().toISOString().split('T')[0],
// //     numberOfGuests: 1,
// //     specialRequests: '',
// //     advanceAmount: 0,
// //     bookingSource: 'Walk-in',
// //     email: ''
// //   });
// //   const [isBookingOpen, setIsBookingOpen] = useState(false);

// //   // Load existing Excel data or initialize an empty array
// //   const [excelData, setExcelData] = useState<BookingData[]>([]);
// //   const excelFileName = 'table_bookings.xlsx';

// //   useEffect(() => {
// //     // Try to load existing Excel data from localStorage (simulating persistence)
// //     const savedData = localStorage.getItem(excelFileName);
// //     if (savedData) {
// //       const parsedData = JSON.parse(savedData);
// //       setExcelData(parsedData);
// //     }
// //   }, []);

// //   // Simulate Excel sheet update (append to single sheet)
// //   const updateExcelSheet = (bookingData: BookingData) => {
// //     const updatedData = [...excelData, bookingData];
// //     setExcelData(updatedData);

// //     // Convert to Excel format
// //     const excelDataForSheet = updatedData.map((data, index) => ({
// //       'Sr. No': index + 1,
// //       'Booking Date': new Date().toLocaleString(),
// //       'Table Number': data.tableNumber,
// //       'Area': data.area,
// //       'Customer Name': data.customerName,
// //       'Phone': data.phone,
// //       'Email': data.email,
// //       'Number of Guests': data.numberOfGuests,
// //       'Booking Time': data.time,
// //       'Date of Reservation': data.date,
// //       'Special Requests': data.specialRequests,
// //       'Advance Amount': data.advanceAmount,
// //       'Booking Source': data.bookingSource
// //     }));

// //     const wb = XLSX.utils.book_new();
// //     const ws = XLSX.utils.json_to_sheet(excelDataForSheet);
// //     const wsRows = XLSX.utils.sheet_to_json(ws, { header: 1 });
// //     const colWidths = wsRows[0].map((header: string) => ({ wch: header.length + 5 }));
// //     ws['!cols'] = colWidths;

// //     XLSX.utils.book_append_sheet(wb, ws, 'Bookings');

// //     // Save to localStorage for simulation
// //     localStorage.setItem(excelFileName, JSON.stringify(updatedData));
// //     XLSX.writeFile(wb, excelFileName);
// //   };

// //   const handleTableClick = (table: Table) => {
// //     setSelectedTable(table);
// //   };

// //   const handleStatusChange = (tableId: string, newStatus: Table['status']) => {
// //     setTables(tables.map(table => 
// //       table.id === tableId 
// //         ? { 
// //             ...table, 
// //             status: newStatus, 
// //             reservation: newStatus === 'Occupied' ? table.reservation : undefined 
// //           }
// //         : table
// //     ));
// //     setSelectedTable(tables.find(t => t.id === tableId) || null);
// //   };

// //   const handleBookingSubmit = (e: React.FormEvent) => {
// //     e.preventDefault();
// //     if (selectedTable && bookingForm.customerName && bookingForm.phone && bookingForm.time && bookingForm.date) {
// //       const newReservation = {
// //         time: bookingForm.time,
// //         customerName: bookingForm.customerName,
// //         phone: bookingForm.phone,
// //       };

// //       setTables(tables.map(table => 
// //         table.id === selectedTable.id 
// //           ? { 
// //               ...table, 
// //               status: 'Occupied', 
// //               reservation: newReservation 
// //             }
// //           : table
// //       ));

// //       const bookingData: BookingData = {
// //         tableNumber: selectedTable.number,
// //         area: selectedTable.area,
// //         customerName: bookingForm.customerName,
// //         phone: bookingForm.phone,
// //         time: bookingForm.time,
// //         date: bookingForm.date,
// //         numberOfGuests: bookingForm.numberOfGuests,
// //         specialRequests: bookingForm.specialRequests,
// //         advanceAmount: bookingForm.advanceAmount,
// //         bookingSource: bookingForm.bookingSource,
// //         email: bookingForm.email
// //       };

// //       updateExcelSheet(bookingData);

// //       setSelectedTable(null);
// //       setBookingForm({
// //         tableNumber: 0,
// //         area: '',
// //         customerName: '',
// //         phone: '',
// //         time: '',
// //         date: new Date().toISOString().split('T')[0],
// //         numberOfGuests: 1,
// //         specialRequests: '',
// //         advanceAmount: 0,
// //         bookingSource: 'Walk-in',
// //         email: ''
// //       });
// //       setIsBookingOpen(false);
// //     }
// //   };

// //   const handleAddTable = (area: Table['area']) => {
// //     const newTableNumber = tables.reduce((max, table) => Math.max(max, table.number), 0) + 1;
// //     const newTable: Table = {
// //       id: `new${newTableNumber}`,
// //       number: newTableNumber,
// //       area: area,
// //       status: 'Available',
// //       capacity: 4, // Default capacity, can be customized via a form if needed
// //     };
// //     setTables([...tables, newTable]);
// //   };

// //   const areas: Table['area'][] = ['AC Premium', 'Garden', 'Bar'];

// //   const BookingModal = ({ isOpen, onClose, table }: { isOpen: boolean; onClose: () => void; table: Table | null }) => {
// //     if (!isOpen || !table) return null;

// //     const handleSubmit = (e: React.FormEvent) => {
// //       e.preventDefault();
// //       const updatedTables = tables.map(t => 
// //         t.id === table.id 
// //           ? { ...t, status: 'Occupied' as const, reservation: { 
// //               time: bookingForm.time, 
// //               customerName: bookingForm.customerName, 
// //               phone: bookingForm.phone 
// //             }} 
// //           : t
// //       );
// //       setTables(updatedTables);
// //       updateExcelSheet(bookingForm);
// //       onClose();
// //       setBookingForm({
// //         tableNumber: 0,
// //         area: '',
// //         customerName: '',
// //         phone: '',
// //         time: '',
// //         date: new Date().toISOString().split('T')[0],
// //         numberOfGuests: 1,
// //         specialRequests: '',
// //         advanceAmount: 0,
// //         bookingSource: 'Walk-in',
// //         email: ''
// //       });
// //     };

// //     return (
// //       <motion.div
// //         initial={{ opacity: 0, scale: 0.9 }}
// //         animate={{ opacity: 1, scale: 1 }}
// //         exit={{ opacity: 0, scale: 0.9 }}
// //         transition={{ type: 'spring', stiffness: 300, damping: 20 }}
// //         className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
// //       >
// //         <motion.div
// //           initial={{ y: -50, opacity: 0, rotate: 5 }}
// //           animate={{ y: 0, opacity: 1, rotate: 0 }}
// //           exit={{ y: -50, opacity: 0, rotate: 5 }}
// //           transition={{ type: 'spring', stiffness: 300, damping: 20 }}
// //           className="bg-white rounded-3xl p-8 w-full max-w-2xl shadow-2xl border border-gray-200 transform hover:scale-102 transition-all duration-300"
// //         >
// //           <div className="flex items-center justify-between mb-8">
// //             <h2 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
// //               <CalendarIcon className="h-7 w-7 text-blue-600" />
// //               Book Table {table.number} in {table.area}
// //             </h2>
// //             <button
// //               onClick={onClose}
// //               className="text-gray-500 hover:text-gray-700 transition-colors"
// //             >
// //               <span className="text-2xl font-bold">×</span>
// //             </button>
// //           </div>
// //           <form onSubmit={handleSubmit} className="space-y-8">
// //             <div className="grid grid-cols-2 gap-6">
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Customer Name</label>
// //                 <input
// //                   type="text"
// //                   required
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.customerName}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, customerName: e.target.value })}
// //                 />
// //               </div>
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Phone</label>
// //                 <input
// //                   type="tel"
// //                   required
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.phone}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, phone: e.target.value })}
// //                 />
// //               </div>
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Email</label>
// //                 <input
// //                   type="email"
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.email}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, email: e.target.value })}
// //                 />
// //               </div>
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Number of Guests</label>
// //                 <input
// //                   type="number"
// //                   required
// //                   min="1"
// //                   max={table.capacity}
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.numberOfGuests}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, numberOfGuests: parseInt(e.target.value) || 1 })}
// //                 />
// //               </div>
// //               <div className="col-span-2">
// //                 <label className="block text-lg font-medium text-gray-700">Booking Details</label>
// //                 <div className="mt-2 flex gap-4">
// //                   <input
// //                     type="time"
// //                     required
// //                     className="w-1/2 block rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                     value={bookingForm.time}
// //                     onChange={(e) => setBookingForm({ ...bookingForm, time: e.target.value })}
// //                   />
// //                   <input
// //                     type="date"
// //                     required
// //                     className="w-1/2 block rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                     value={bookingForm.date}
// //                     onChange={(e) => setBookingForm({ ...bookingForm, date: e.target.value })}
// //                   />
// //                 </div>
// //               </div>
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Advance Amount</label>
// //                 <input
// //                   type="number"
// //                   min="0"
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.advanceAmount}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, advanceAmount: parseInt(e.target.value) || 0 })}
// //                 />
// //               </div>
// //               <div>
// //                 <label className="block text-lg font-medium text-gray-700">Booking Source</label>
// //                 <select
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                   value={bookingForm.bookingSource}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, bookingSource: e.target.value })}
// //                 >
// //                   <option value="Walk-in">Walk-in</option>
// //                   <option value="Phone">Phone</option>
// //                   <option value="Online">Online</option>
// //                   <option value="Third-party">Third-party</option>
// //                 </select>
// //               </div>
// //               <div className="col-span-2">
// //                 <label className="block text-lg font-medium text-gray-700">Special Requests</label>
// //                 <textarea
// //                   className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-4 transition-all"
// //                   rows={4}
// //                   value={bookingForm.specialRequests}
// //                   onChange={(e) => setBookingForm({ ...bookingForm, specialRequests: e.target.value })}
// //                 />
// //               </div>
// //             </div>

// //             <div className="flex justify-end items-center pt-8 border-t border-gray-200">
// //               <div className="space-x-5">
// //                 <button
// //                   type="button"
// //                   onClick={onClose}
// //                   className="px-5 py-2 text-lg font-medium text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-colors shadow-md"
// //                 >
// //                   Cancel
// //                 </button>
// //                 <button
// //                   type="submit"
// //                   className="px-5 py-2 text-lg font-medium text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors shadow-md"
// //                 >
// //                   Confirm Booking
// //                 </button>
// //               </div>
// //             </div>
// //           </form>
// //         </motion.div>
// //       </motion.div>
// //     );
// //   };

// //   const TableStatusLegend = () => (
// //     <div className="mb-6 p-4 bg-white rounded-lg shadow-md">
// //       <h3 className="text-lg font-semibold mb-3 text-gray-800">Table Status Guide</h3>
// //       <div className="flex flex-wrap gap-4">
// //         {Object.entries(statusColors).map(([status, colorClass]) => (
// //           <div key={status} className="flex items-center">
// //             <div className={`w-6 h-6 rounded border-2 ${colorClass.split(' ').slice(0, 2).join(' ')}`}></div>
// //             <span className="ml-2 text-sm text-gray-700">{status}</span>
// //           </div>
// //         ))}
// //       </div>
// //     </div>
// //   );

// //   return (
// //     <div className="flex min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
// //       {/* Sidebar for Table Details */}
// //       <motion.div
// //         initial={{ x: -100, opacity: 0 }}
// //         animate={{ x: 0, opacity: 1 }}
// //         className="w-64 p-4 bg-white shadow-md rounded-r-lg border-r border-gray-200"
// //       >
// //         <h2 className="text-lg font-semibold mb-4 text-gray-800">Table Details</h2>
// //         {selectedTable ? (
// //           <div className="space-y-4">
// //             <div className={`p-2 rounded-lg ${statusColors[selectedTable.status]}`}>
// //               <select
// //                 value={selectedTable.status}
// //                 onChange={(e) => handleStatusChange(selectedTable.id, e.target.value as Table['status'])}
// //                 className="w-full p-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500 transition-all"
// //               >
// //                 {Object.keys(statusColors).map((status) => (
// //                   <option key={status} value={status}>
// //                     {status}
// //                   </option>
// //                 ))}
// //               </select>
// //             </div>
// //             <p className="text-gray-700">
// //               <span className="font-medium">Table no:</span> {selectedTable.number}
// //             </p>
// //             <p className="text-gray-700">
// //               <span className="font-medium">Area:</span> {selectedTable.area}
// //             </p>
// //             <p className="text-gray-700">
// //               <span className="font-medium">Capacity:</span> {selectedTable.capacity} seats
// //             </p>
// //             {selectedTable.reservation && (
// //               <div className="mt-2 text-sm text-gray-600">
// //                 <p><span className="font-medium">Customer:</span> {selectedTable.reservation.customerName}</p>
// //                 <p><span className="font-medium">Phone:</span> {selectedTable.reservation.phone}</p>
// //                 <p><span className="font-medium">Time:</span> {selectedTable.reservation.time}</p>
// //               </div>
// //             )}
// //             {selectedTable.status === 'Available' && (
// //               <button
// //                 onClick={() => setIsBookingOpen(true)}
// //                 className="mt-4 w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition-colors shadow-md"
// //               >
// //                 Book Table
// //               </button>
// //             )}
// //           </div>
// //         ) : (
// //           <p className="text-gray-500">Select a table to view details</p>
// //         )}
// //       </motion.div>

// //       {/* Main Table Layout (Stacked Horizontal Lines for Categories, Plain Layout) */}
// //       <div className="flex-1 p-6">
// //         <motion.h1 
// //           initial={{ opacity: 0 }}
// //           animate={{ opacity: 1 }}
// //           className="text-3xl font-bold mb-6 flex items-center gap-2 text-gray-800"
// //         >
// //           <TableIcon className="h-7 w-7 text-blue-600" />
// //           Ahmedabad - Restaurant Dashboard
// //         </motion.h1>

// //         <TableStatusLegend />

// //         <div className="flex space-x-6 mb-6">
// //           {['Running Table', 'Printed Table', 'Running KOT Table'].map(status => (
// //             <div key={status} className={`p-2 rounded-lg ${statusColors[status as Table['status']]}`}>
// //               <span className="text-sm text-gray-700">{status}</span>
// //             </div>
// //           ))}
// //         </div>

// //         <div className="space-y-8">
// //           {areas.map((area, index) => (
// //             <motion.div
// //               key={area}
// //               initial={{ opacity: 0, y: 20 }}
// //               animate={{ opacity: 1, y: 0 }}
// //               className="bg-white p-6 rounded-lg shadow-lg"
// //             >
// //               <h2 className="text-xl font-semibold mb-6 text-gray-800 border-b border-gray-200 pb-4">
// //                 {area}
// //               </h2>
// //               <div className="overflow-x-auto">
// //                 <div className="flex space-x-6">
// //                   {tables
// //                     .filter(table => table.area === area)
// //                     .map((table, tableIndex) => (
// //                       <motion.div
// //                         key={table.id}
// //                         initial={{ opacity: 0, x: -20 }}
// //                         animate={{ opacity: 1, x: 0 }}
// //                         transition={{ delay: tableIndex * 0.1 }}
// //                         whileHover={{ scale: 1.05, boxShadow: '0 8px 20px rgba(0, 0, 0, 0.1)', zIndex: 10 }}
// //                         whileTap={{ scale: 0.98 }}
// //                         onClick={() => handleTableClick(table)}
// //                         className={`w-32 h-32 flex flex-col items-center justify-center rounded-lg border-2 cursor-pointer ${statusColors[table.status]} transition-all duration-300`}
// //                       >
// //                         <span className="font-bold text-xl text-gray-800">{table.number}</span>
// //                         <span className="text-sm mt-1 text-gray-600">Capacity: {table.capacity}</span>
// //                         <span className="text-sm mt-1 text-gray-600">{table.status}</span>
// //                       </motion.div>
// //                     ))}
// //                   <motion.button
// //                     onClick={() => handleAddTable(area)}
// //                     initial={{ scale: 1 }}
// //                     whileHover={{ scale: 1.05, backgroundColor: 'rgba(59, 130, 246, 0.2)' }}
// //                     className="w-32 h-32 flex items-center justify-center rounded-lg border-2 border-dashed border-blue-500 bg-blue-50 text-blue-600 font-semibold hover:bg-blue-100 transition-all duration-300"
// //                   >
// //                     <PlusIcon className="h-6 w-6" />
// //                     Add Table
// //                   </motion.button>
// //                 </div>
// //               </div>
// //             </motion.div>
// //           ))}
// //         </div>
// //       </div>

// //       {/* New Booking Popup (Centered Modal with Animation) */}
// //       <AnimatePresence>
// //         {isBookingOpen && selectedTable && (
// //           <motion.div
// //             initial={{ opacity: 0, scale: 0.9 }}
// //             animate={{ opacity: 1, scale: 1 }}
// //             exit={{ opacity: 0, scale: 0.9 }}
// //             transition={{ type: 'spring', stiffness: 300, damping: 20 }}
// //             className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
// //           >
// //             <motion.div
// //               initial={{ y: 50, opacity: 0, rotate: -5 }}
// //               animate={{ y: 0, opacity: 1, rotate: 0 }}
// //               exit={{ y: 50, opacity: 0, rotate: -5 }}
// //               transition={{ type: 'spring', stiffness: 300, damping: 20 }}
// //               className="bg-white rounded-3xl p-8 w-full max-w-2xl shadow-2xl border border-gray-200 transform hover:scale-102 transition-all duration-300"
// //             >
// //               <div className="flex items-center justify-between mb-8">
// //                 <h2 className="text-3xl font-bold text-gray-800 flex items-center gap-3">
// //                   <CalendarIcon className="h-7 w-7 text-blue-600" />
// //                   Book Table {selectedTable.number} in {selectedTable.area}
// //                 </h2>
// //                 <button
// //                   onClick={() => setIsBookingOpen(false)}
// //                   className="text-gray-500 hover:text-gray-700 transition-colors"
// //                 >
// //                   <span className="text-2xl font-bold">×</span>
// //                 </button>
// //               </div>
// //               <form onSubmit={(e) => { e.preventDefault(); handleBookingSubmit(e); }} className="space-y-8">
// //                 <div className="grid grid-cols-2 gap-6">
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Customer Name</label>
// //                     <input
// //                       type="text"
// //                       required
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.customerName}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, customerName: e.target.value })}
// //                     />
// //                   </div>
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Phone</label>
// //                     <input
// //                       type="tel"
// //                       required
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.phone}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, phone: e.target.value })}
// //                     />
// //                   </div>
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Email</label>
// //                     <input
// //                       type="email"
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.email}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, email: e.target.value })}
// //                     />
// //                   </div>
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Number of Guests</label>
// //                     <input
// //                       type="number"
// //                       required
// //                       min="1"
// //                       max={selectedTable.capacity}
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.numberOfGuests}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, numberOfGuests: parseInt(e.target.value) || 1 })}
// //                     />
// //                   </div>
// //                   <div className="col-span-2">
// //                     <label className="block text-lg font-medium text-gray-700">Booking Details</label>
// //                     <div className="mt-2 flex gap-4">
// //                       <input
// //                         type="time"
// //                         required
// //                         className="w-1/2 block rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                         value={bookingForm.time}
// //                         onChange={(e) => setBookingForm({ ...bookingForm, time: e.target.value })}
// //                       />
// //                       <input
// //                         type="date"
// //                         required
// //                         className="w-1/2 block rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                         value={bookingForm.date}
// //                         onChange={(e) => setBookingForm({ ...bookingForm, date: e.target.value })}
// //                       />
// //                     </div>
// //                   </div>
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Advance Amount</label>
// //                     <input
// //                       type="number"
// //                       min="0"
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.advanceAmount}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, advanceAmount: parseInt(e.target.value) || 0 })}
// //                     />
// //                   </div>
// //                   <div>
// //                     <label className="block text-lg font-medium text-gray-700">Booking Source</label>
// //                     <select
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-3 transition-all"
// //                       value={bookingForm.bookingSource}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, bookingSource: e.target.value })}
// //                     >
// //                       <option value="Walk-in">Walk-in</option>
// //                       <option value="Phone">Phone</option>
// //                       <option value="Online">Online</option>
// //                       <option value="Third-party">Third-party</option>
// //                     </select>
// //                   </div>
// //                   <div className="col-span-2">
// //                     <label className="block text-lg font-medium text-gray-700">Special Requests</label>
// //                     <textarea
// //                       className="mt-2 block w-full rounded-xl border-gray-300 shadow-md focus:border-blue-500 focus:ring-blue-500 p-4 transition-all"
// //                       rows={4}
// //                       value={bookingForm.specialRequests}
// //                       onChange={(e) => setBookingForm({ ...bookingForm, specialRequests: e.target.value })}
// //                     />
// //                   </div>
// //                 </div>

// //                 <div className="flex justify-end items-center pt-8 border-t border-gray-200">
// //                   <div className="space-x-5">
// //                     <button
// //                       type="button"
// //                       onClick={onclose}
// //                       className="px-5 py-2 text-lg font-medium text-gray-700 bg-gray-100 rounded-xl hover:bg-gray-200 transition-colors shadow-md"
// //                     >
// //                       Cancel
// //                     </button>
// //                     <button
// //                       type="submit"
// //                       className="px-5 py-2 text-lg font-medium text-white bg-blue-600 rounded-xl hover:bg-blue-700 transition-colors shadow-md"
// //                     >
// //                       Confirm Booking
// //                     </button>
// //                   </div>
// //                 </div>
// //               </form>
// //             </motion.div>
// //           </motion.div>
// //         )}
// //       </AnimatePresence>
// //     </div>
// //   );
// // };

// // export default Booking;




// // components/Booking.tsx
// import React, { useState, useEffect } from 'react';
// import { TableIcon, UsersIcon, ClockIcon, CalendarIcon, PlusIcon } from '@heroicons/react/outline';
// import { AnimatePresence, motion } from 'framer-motion';
// import * as XLSX from 'xlsx'; // For Excel manipulation (install with `npm install xlsx`)

// interface Table {
//   id: string;
//   number: number;
//   area: 'AC Premium' | 'Garden' | 'Bar';
//   status: 'Available' | 'Occupied' | 'Running Table' | 'Printed Table' | 'Running KOT Table';
//   capacity: number;
//   reservation?: {
//     time: string;
//     customerName: string;
//     phone: string;
//   };
// }

// interface BookingData {
//   tableNumber: number;
//   area: string;
//   customerName: string;
//   phone: string;
//   time: string;
//   date: string;
//   numberOfGuests: number;
//   specialRequests: string;
//   advanceAmount: number;
//   bookingSource: string;
//   email: string;
// }

// const initialTables: Table[] = [
//   // AC Premium Section
//   { id: 'ac1', number: 1, area: 'AC Premium', status: 'Available', capacity: 4 },
//   { id: 'ac2', number: 2, area: 'AC Premium', status: 'Available', capacity: 6 },
//   { id: 'ac3', number: 3, area: 'AC Premium', status: 'Available', capacity: 4 },
//   { id: 'ac4', number: 4, area: 'AC Premium', status: 'Available', capacity: 6 },
//   { id: 'ac5', number: 5, area: 'AC Premium', status: 'Available', capacity: 4 },
  
//   // Garden Section
//   { id: 'g1', number: 1, area: 'Garden', status: 'Available', capacity: 8 },
//   { id: 'g2', number: 2, area: 'Garden', status: 'Available', capacity: 6 },
//   { id: 'g3', number: 3, area: 'Garden', status: 'Available', capacity: 4 },
//   { id: 'g4', number: 4, area: 'Garden', status: 'Available', capacity: 8 },
//   { id: 'g5', number: 5, area: 'Garden', status: 'Available', capacity: 6 },
  
//   // Bar Section
//   { id: 'h1', number: 1, area: 'Bar', status: 'Available', capacity: 4 },
//   { id: 'h2', number: 2, area: 'Bar', status: 'Available', capacity: 6 },
//   { id: 'h3', number: 3, area: 'Bar', status: 'Available', capacity: 4 },
//   { id: 'h4', number: 4, area: 'Bar', status: 'Available', capacity: 6 },
//   { id: 'h5', number: 5, area: 'Bar', status: 'Available', capacity: 4 },
// ];

// const statusColors = {
//   Available: 'bg-emerald-50 border-emerald-500 text-emerald-700 hover:bg-emerald-100',
//   Occupied: 'bg-red-50 border-red-500 text-red-700 hover:bg-red-100',
//   'Running Table': 'bg-blue-50 border-blue-500 text-blue-700 hover:bg-blue-100',
//   'Printed Table': 'bg-purple-50 border-purple-500 text-purple-700 hover:bg-purple-100',
//   'Running KOT Table': 'bg-amber-50 border-amber-500 text-amber-700 hover:bg-amber-100'
// };

// const Booking: React.FC = () => {
//   const [tables, setTables] = useState<Table[]>(initialTables);
//   const [selectedTable, setSelectedTable] = useState<Table | null>(null);
//   const [bookingForm, setBookingForm] = useState<BookingData>({
//     tableNumber: 0,
//     area: '',
//     customerName: '',
//     phone: '',
//     time: '',
//     date: new Date().toISOString().split('T')[0],
//     numberOfGuests: 1,
//     specialRequests: '',
//     advanceAmount: 0,
//     bookingSource: 'Walk-in',
//     email: ''
//   });
//   const [isBookingOpen, setIsBookingOpen] = useState(false);

//   // Load existing Excel data or initialize an empty array
//   const [excelData, setExcelData] = useState<BookingData[]>([]);
//   const excelFileName = 'table_bookings.xlsx';

//   useEffect(() => {
//     // Try to load existing Excel data from localStorage (simulating persistence)
//     const savedData = localStorage.getItem(excelFileName);
//     if (savedData) {
//       const parsedData = JSON.parse(savedData);
//       setExcelData(parsedData);
//     }
//   }, []);

//   // Simulate Excel sheet update (append to single sheet)
//   const updateExcelSheet = (bookingData: BookingData) => {
//     const updatedData = [...excelData, bookingData];
//     setExcelData(updatedData);

//     // Convert to Excel format
//     const excelDataForSheet = updatedData.map((data, index) => ({
//       'Sr. No': index + 1,
//       'Booking Date': new Date().toLocaleString(),
//       'Table Number': data.tableNumber,
//       'Area': data.area,
//       'Customer Name': data.customerName,
//       'Phone': data.phone,
//       'Email': data.email,
//       'Number of Guests': data.numberOfGuests,
//       'Booking Time': data.time,
//       'Date of Reservation': data.date,
//       'Special Requests': data.specialRequests,
//       'Advance Amount': data.advanceAmount,
//       'Booking Source': data.bookingSource
//     }));

//     const wb = XLSX.utils.book_new();
//     const ws = XLSX.utils.json_to_sheet(excelDataForSheet);
//     const wsRows = XLSX.utils.sheet_to_json(ws, { header: 1 });
//     const colWidths = wsRows[0].map((header: string) => ({ wch: header.length + 5 }));
//     ws['!cols'] = colWidths;

//     XLSX.utils.book_append_sheet(wb, ws, 'Bookings');

//     // Save to localStorage for simulation
//     localStorage.setItem(excelFileName, JSON.stringify(updatedData));
//     XLSX.writeFile(wb, excelFileName);
//   };

//   const handleTableClick = (table: Table) => {
//     setSelectedTable(table);
//   };

//   const handleStatusChange = (tableId: string, newStatus: Table['status']) => {
//     setTables(tables.map(table => 
//       table.id === tableId 
//         ? { 
//             ...table, 
//             status: newStatus, 
//             reservation: newStatus === 'Occupied' ? table.reservation : undefined 
//           }
//         : table
//     ));
//     setSelectedTable(tables.find(t => t.id === tableId) || null);
//   };

//   const handleBookingSubmit = (e: React.FormEvent) => {
//     e.preventDefault();
//     if (selectedTable && bookingForm.customerName && bookingForm.phone && bookingForm.time && bookingForm.date) {
//       const newReservation = {
//         time: bookingForm.time,
//         customerName: bookingForm.customerName,
//         phone: bookingForm.phone,
//       };

//       setTables(tables.map(table => 
//         table.id === selectedTable.id 
//           ? { 
//               ...table, 
//               status: 'Occupied', 
//               reservation: newReservation 
//             }
//           : table
//       ));

//       const bookingData: BookingData = {
//         tableNumber: selectedTable.number,
//         area: selectedTable.area,
//         customerName: bookingForm.customerName,
//         phone: bookingForm.phone,
//         time: bookingForm.time,
//         date: bookingForm.date,
//         numberOfGuests: bookingForm.numberOfGuests,
//         specialRequests: bookingForm.specialRequests,
//         advanceAmount: bookingForm.advanceAmount,
//         bookingSource: bookingForm.bookingSource,
//         email: bookingForm.email
//       };

//       updateExcelSheet(bookingData);

//       setSelectedTable(null);
//       setBookingForm({
//         tableNumber: 0,
//         area: '',
//         customerName: '',
//         phone: '',
//         time: '',
//         date: new Date().toISOString().split('T')[0],
//         numberOfGuests: 1,
//         specialRequests: '',
//         advanceAmount: 0,
//         bookingSource: 'Walk-in',
//         email: ''
//       });
//       setIsBookingOpen(false);
//     }
//   };

//   const handleAddTable = (area: Table['area']) => {
//     const newTableNumber = tables.reduce((max, table) => Math.max(max, table.number), 0) + 1;
//     const newTable: Table = {
//       id: `new${newTableNumber}`,
//       number: newTableNumber,
//       area: area,
//       status: 'Available',
//       capacity: 4, // Default capacity, can be customized via a form if needed
//     };
//     setTables([...tables, newTable]);
//   };

//   const areas: Table['area'][] = ['AC Premium', 'Garden', 'Bar'];

//   const BookingModal = ({ isOpen, onClose, table }: { isOpen: boolean; onClose: () => void; table: Table | null }) => {
//     if (!isOpen || !table) return null;

//     const handleSubmit = (e: React.FormEvent) => {
//       e.preventDefault();
//       const updatedTables = tables.map(t => 
//         t.id === table.id 
//           ? { ...t, status: 'Occupied' as const, reservation: { 
//               time: bookingForm.time, 
//               customerName: bookingForm.customerName, 
//               phone: bookingForm.phone 
//             }} 
//           : t
//       );
//       setTables(updatedTables);
//       updateExcelSheet(bookingForm);
//       onClose();
//       setBookingForm({
//         tableNumber: 0,
//         area: '',
//         customerName: '',
//         phone: '',
//         time: '',
//         date: new Date().toISOString().split('T')[0],
//         numberOfGuests: 1,
//         specialRequests: '',
//         advanceAmount: 0,
//         bookingSource: 'Walk-in',
//         email: ''
//       });
//     };

//     return (
//       <motion.div
//         initial={{ opacity: 0, scale: 0.9 }}
//         animate={{ opacity: 1, scale: 1 }}
//         exit={{ opacity: 0, scale: 0.9 }}
//         transition={{ type: 'spring', stiffness: 300, damping: 20 }}
//         className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
//       >
//         <motion.div
//           initial={{ y: -30, opacity: 0, rotate: -3 }}
//           animate={{ y: 0, opacity: 1, rotate: 0 }}
//           exit={{ y: -30, opacity: 0, rotate: -3 }}
//           transition={{ type: 'spring', stiffness: 300, damping: 20 }}
//           className="bg-white rounded-2xl p-6 w-full max-w-sm shadow-xl border border-gray-200 transform hover:scale-101 transition-all duration-300"
//         >
//           <div className="flex items-center justify-between mb-6">
//             <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
//               <CalendarIcon className="h-6 w-6 text-blue-600" />
//               Book Table {table.number} in {table.area}
//             </h2>
//             <button
//               onClick={onClose}
//               className="text-gray-500 hover:text-gray-700 transition-colors"
//             >
//               <span className="text-xl font-bold">×</span>
//             </button>
//           </div>
//           <form onSubmit={handleSubmit} className="space-y-5">
//             <div className="space-y-4">
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Customer Name</label>
//                 <input
//                   type="text"
//                   required
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.customerName}
//                   onChange={(e) => setBookingForm({ ...bookingForm, customerName: e.target.value })}
//                 />
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Phone</label>
//                 <input
//                   type="tel"
//                   required
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.phone}
//                   onChange={(e) => setBookingForm({ ...bookingForm, phone: e.target.value })}
//                 />
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Email</label>
//                 <input
//                   type="email"
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.email}
//                   onChange={(e) => setBookingForm({ ...bookingForm, email: e.target.value })}
//                 />
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Number of Guests</label>
//                 <input
//                   type="number"
//                   required
//                   min="1"
//                   max={table.capacity}
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.numberOfGuests}
//                   onChange={(e) => setBookingForm({ ...bookingForm, numberOfGuests: parseInt(e.target.value) || 1 })}
//                 />
//               </div>
//               <div className="flex gap-3">
//                 <div className="w-1/2">
//                   <label className="block text-sm font-medium text-gray-700">Time</label>
//                   <input
//                     type="time"
//                     required
//                     className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                     value={bookingForm.time}
//                     onChange={(e) => setBookingForm({ ...bookingForm, time: e.target.value })}
//                   />
//                 </div>
//                 <div className="w-1/2">
//                   <label className="block text-sm font-medium text-gray-700">Date</label>
//                   <input
//                     type="date"
//                     required
//                     className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                     value={bookingForm.date}
//                     onChange={(e) => setBookingForm({ ...bookingForm, date: e.target.value })}
//                   />
//                 </div>
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Advance Amount</label>
//                 <input
//                   type="number"
//                   min="0"
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.advanceAmount}
//                   onChange={(e) => setBookingForm({ ...bookingForm, advanceAmount: parseInt(e.target.value) || 0 })}
//                 />
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Booking Source</label>
//                 <select
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   value={bookingForm.bookingSource}
//                   onChange={(e) => setBookingForm({ ...bookingForm, bookingSource: e.target.value })}
//                 >
//                   <option value="Walk-in">Walk-in</option>
//                   <option value="Phone">Phone</option>
//                   <option value="Online">Online</option>
//                   <option value="Third-party">Third-party</option>
//                 </select>
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Special Requests</label>
//                 <textarea
//                   className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                   rows={3}
//                   value={bookingForm.specialRequests}
//                   onChange={(e) => setBookingForm({ ...bookingForm, specialRequests: e.target.value })}
//                 />
//               </div>
//             </div>

//             <div className="flex justify-end items-center pt-6 border-t border-gray-200">
//               <div className="space-x-4">
//                 <button
//                   type="button"
//                   onClick={onClose}
//                   className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors shadow-sm"
//                 >
//                   Cancel
//                 </button>
//                 <button
//                   type="submit"
//                   className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors shadow-sm"
//                 >
//                   Confirm Booking
//                 </button>
//               </div>
//             </div>
//           </form>
//         </motion.div>
//       </motion.div>
//     );
//   };

//   const TableStatusLegend = () => (
//     <div className="mb-6 p-4 bg-white rounded-lg shadow-md">
//       <h3 className="text-lg font-semibold mb-3 text-gray-800">Table Status Guide</h3>
//       <div className="flex flex-wrap gap-4">
//         {Object.entries(statusColors).map(([status, colorClass]) => (
//           <div key={status} className="flex items-center">
//             <div className={`w-6 h-6 rounded border-2 ${colorClass.split(' ').slice(0, 2).join(' ')}`}></div>
//             <span className="ml-2 text-sm text-gray-700">{status}</span>
//           </div>
//         ))}
//       </div>
//     </div>
//   );

//   return (
//     <div className="flex min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
//       {/* Sidebar for Table Details */}
//       <motion.div
//         initial={{ x: -100, opacity: 0 }}
//         animate={{ x: 0, opacity: 1 }}
//         className="w-64 p-4 bg-white shadow-md rounded-r-lg border-r border-gray-200"
//       >
//         <h2 className="text-lg font-semibold mb-4 text-gray-800">Table Details</h2>
//         {selectedTable ? (
//           <div className="space-y-4">
//             <div className={`p-2 rounded-lg ${statusColors[selectedTable.status]}`}>
//               <select
//                 value={selectedTable.status}
//                 onChange={(e) => handleStatusChange(selectedTable.id, e.target.value as Table['status'])}
//                 className="w-full p-2 border border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500 transition-all"
//               >
//                 {Object.keys(statusColors).map((status) => (
//                   <option key={status} value={status}>
//                     {status}
//                   </option>
//                 ))}
//               </select>
//             </div>
//             <p className="text-gray-700">
//               <span className="font-medium">Table no:</span> {selectedTable.number}
//             </p>
//             <p className="text-gray-700">
//               <span className="font-medium">Area:</span> {selectedTable.area}
//             </p>
//             <p className="text-gray-700">
//               <span className="font-medium">Capacity:</span> {selectedTable.capacity} seats
//             </p>
//             {selectedTable.reservation && (
//               <div className="mt-2 text-sm text-gray-600">
//                 <p><span className="font-medium">Customer:</span> {selectedTable.reservation.customerName}</p>
//                 <p><span className="font-medium">Phone:</span> {selectedTable.reservation.phone}</p>
//                 <p><span className="font-medium">Time:</span> {selectedTable.reservation.time}</p>
//               </div>
//             )}
//             {selectedTable.status === 'Available' && (
//               <button
//                 onClick={() => setIsBookingOpen(true)}
//                 className="mt-4 w-full bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition-colors shadow-md"
//               >
//                 Book Table
//               </button>
//             )}
//           </div>
//         ) : (
//           <p className="text-gray-500">Select a table to view details</p>
//         )}
//       </motion.div>

//       {/* Main Table Layout (Stacked Horizontal Lines for Categories, Plain Layout) */}
//       <div className="flex-1 p-6">
//         {/* <motion.h1 
//           initial={{ opacity: 0 }}
//           animate={{ opacity: 1 }}
//           className="text-3xl font-bold mb-6 flex items-center gap-2 text-gray-800"
//         >
//           <TableIcon className="h-7 w-7 text-blue-600" />
//           Ahmedabad - Restaurant Dashboard
//         </motion.h1> */}

//         <TableStatusLegend />

//         <div className="flex space-x-6 mb-6">
//           {['Running Table', 'Printed Table', 'Running KOT Table'].map(status => (
//             <div key={status} className={`p-2 rounded-lg ${statusColors[status as Table['status']]}`}>
//               <span className="text-sm text-gray-700">{status}</span>
//             </div>
//           ))}
//         </div>

//         <div className="space-y-8">
//           {areas.map((area, index) => (
//             <motion.div
//               key={area}
//               initial={{ opacity: 0, y: 20 }}
//               animate={{ opacity: 1, y: 0 }}
//               className="bg-white p-6 rounded-lg shadow-lg"
//             >
//               <h2 className="text-xl font-semibold mb-6 text-gray-800 border-b border-gray-200 pb-4">
//                 {area}
//               </h2>
//               <div className="overflow-x-auto">
//                 <div className="flex space-x-6">
//                   {tables
//                     .filter(table => table.area === area)
//                     .map((table, tableIndex) => (
//                       <motion.div
//                         key={table.id}
//                         initial={{ opacity: 0, x: -20 }}
//                         animate={{ opacity: 1, x: 0 }}
//                         transition={{ delay: tableIndex * 0.1 }}
//                         whileHover={{ scale: 1.05, boxShadow: '0 8px 20px rgba(0, 0, 0, 0.1)', zIndex: 10 }}
//                         whileTap={{ scale: 0.98 }}
//                         onClick={() => handleTableClick(table)}
//                         className={`w-32 h-32 flex flex-col items-center justify-center rounded-lg border-2 cursor-pointer ${statusColors[table.status]} transition-all duration-300`}
//                       >
//                         <span className="font-bold text-xl text-gray-800">{table.number}</span>
//                         <span className="text-sm mt-1 text-gray-600">Capacity: {table.capacity}</span>
//                         <span className="text-sm mt-1 text-gray-600">{table.status}</span>
//                       </motion.div>
//                     ))}
//                   <motion.button
//                     onClick={() => handleAddTable(area)}
//                     initial={{ scale: 1 }}
//                     whileHover={{ scale: 1.05, backgroundColor: 'rgba(59, 130, 246, 0.2)' }}
//                     className="w-32 h-32 flex items-center justify-center rounded-lg border-2 border-dashed border-blue-500 bg-blue-50 text-blue-600 font-semibold hover:bg-blue-100 transition-all duration-300"
//                   >
//                     <PlusIcon className="h-6 w-6" />
//                     Add Table
//                   </motion.button>
//                 </div>
//               </div>
//             </motion.div>
//           ))}
//         </div>
//       </div>

//       {/* New Booking Popup (Reduced Size, Side Slide-in with Fade) */}
//       <AnimatePresence>
//         {isBookingOpen && selectedTable && (
//           <motion.div
//             initial={{ opacity: 0, x: '100%' }}
//             animate={{ opacity: 1, x: 0 }}
//             exit={{ opacity: 0, x: '100%' }}
//             transition={{ type: 'spring', stiffness: 300, damping: 30 }}
//             className="fixed inset-y-0 right-0 w-80 bg-white shadow-2xl border-l border-gray-200 z-50"
//           >
//             <div className="p-6 h-full flex flex-col">
//               <div className="flex items-center justify-between mb-6">
//                 <h2 className="text-2xl font-bold text-gray-800 flex items-center gap-2">
//                   <CalendarIcon className="h-6 w-6 text-blue-600" />
//                   Reserve Table {selectedTable.number} in {selectedTable.area}
//                 </h2>
//                 <button
//                   onClick={() => setIsBookingOpen(false)}
//                   className="text-gray-500 hover:text-gray-700 transition-colors"
//                 >
//                   <span className="text-xl font-bold">×</span>
//                 </button>
//               </div>
//               <form onSubmit={(e) => { e.preventDefault(); handleBookingSubmit(e); }} className="space-y-5 flex-1 overflow-y-auto">
//                 <div className="space-y-4">
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Customer Name</label>
//                     <input
//                       type="text"
//                       required
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.customerName}
//                       onChange={(e) => setBookingForm({ ...bookingForm, customerName: e.target.value })}
//                     />
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Phone</label>
//                     <input
//                       type="tel"
//                       required
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.phone}
//                       onChange={(e) => setBookingForm({ ...bookingForm, phone: e.target.value })}
//                     />
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Email</label>
//                     <input
//                       type="email"
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.email}
//                       onChange={(e) => setBookingForm({ ...bookingForm, email: e.target.value })}
//                     />
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Number of Guests</label>
//                     <input
//                       type="number"
//                       required
//                       min="1"
//                       max={selectedTable.capacity}
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.numberOfGuests}
//                       onChange={(e) => setBookingForm({ ...bookingForm, numberOfGuests: parseInt(e.target.value) || 1 })}
//                     />
//                   </div>
//                   <div className="flex gap-3">
//                     <div className="w-1/2">
//                       <label className="block text-sm font-medium text-gray-700">Time</label>
//                       <input
//                         type="time"
//                         required
//                         className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                         value={bookingForm.time}
//                         onChange={(e) => setBookingForm({ ...bookingForm, time: e.target.value })}
//                       />
//                     </div>
//                     <div className="w-1/2">
//                       <label className="block text-sm font-medium text-gray-700">Date</label>
//                       <input
//                         type="date"
//                         required
//                         className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                         value={bookingForm.date}
//                         onChange={(e) => setBookingForm({ ...bookingForm, date: e.target.value })}
//                       />
//                     </div>
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Advance Amount</label>
//                     <input
//                       type="number"
//                       min="0"
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.advanceAmount}
//                       onChange={(e) => setBookingForm({ ...bookingForm, advanceAmount: parseInt(e.target.value) || 0 })}
//                     />
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Booking Source</label>
//                     <select
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       value={bookingForm.bookingSource}
//                       onChange={(e) => setBookingForm({ ...bookingForm, bookingSource: e.target.value })}
//                     >
//                       <option value="Walk-in">Walk-in</option>
//                       <option value="Phone">Phone</option>
//                       <option value="Online">Online</option>
//                       <option value="Third-party">Third-party</option>
//                     </select>
//                   </div>
//                   <div>
//                     <label className="block text-sm font-medium text-gray-700">Special Requests</label>
//                     <textarea
//                       className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 p-2 transition-all"
//                       rows={3}
//                       value={bookingForm.specialRequests}
//                       onChange={(e) => setBookingForm({ ...bookingForm, specialRequests: e.target.value })}
//                     />
//                   </div>
//                 </div>

//                 <div className="mt-auto pt-6 border-t border-gray-200">
//                   <div className="space-x-4">
//                     <button
//                       type="button"
//                       onClick={onclose}
//                       className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors shadow-sm"
//                     >
//                       Cancel
//                     </button>
//                     <button
//                       type="submit"
//                       className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors shadow-sm"
//                     >
//                       Confirm Booking
//                     </button>
//                   </div>
//                 </div>
//               </form>
//             </div>
//           </motion.div>
//         )}
//       </AnimatePresence>
//     </div>
//   );
// };

// export default Booking;







import React, { useState, useEffect } from 'react';
import { TableIcon, PlusIcon, XIcon } from '@heroicons/react/outline';
import { AnimatePresence, motion } from 'framer-motion';
import * as XLSX from 'xlsx';

// Types and constants moved to separate sections
type TableArea = 'AC Premium' | 'Garden' | 'Bar';
type TableStatus = 'Available' | 'Occupied' | 'Running Table' | 'Printed Table' | 'Running KOT Table';

interface Table {
  id: string;
  number: number;
  area: TableArea;
  status: TableStatus;
  capacity: number;
  reservation?: {
    time: string;
    customerName: string;
    phone: string;
  };
}

interface BookingData extends Omit<Table, 'id' | 'status' | 'capacity'> {
  time: any;
  phone: any;
  customerName: any;
  date: string;
  numberOfGuests: number;
  specialRequests: string;
  advanceAmount: number;
  bookingSource: string;
  email: string;
}

const AREAS: TableArea[] = ['AC Premium', 'Garden', 'Bar'];
const STATUS_COLORS = {
  Available: 'bg-emerald-100 border-emerald-600',
  Occupied: 'bg-red-100 border-red-600',
  'Running Table': 'bg-blue-100 border-blue-600',
  'Printed Table': 'bg-purple-100 border-purple-600',
  'Running KOT Table': 'bg-amber-100 border-amber-600'
};

const initialTables: Table[] = [
  // AC Premium
  ...Array.from({ length: 5 }, (_, i) => ({
    id: `ac${i + 1}`,
    number: i + 1,
    area: 'AC Premium' as TableArea,
    status: 'Available' as TableStatus,
    capacity: i % 2 === 0 ? 4 : 6
  })),
  // Garden
  ...Array.from({ length: 5 }, (_, i) => ({
    id: `g${i + 1}`,
    number: i + 1,
    area: 'Garden' as TableArea,
    status: 'Available' as TableStatus,
    capacity: i % 2 === 0 ? 8 : 6
  })),
  // Bar
  ...Array.from({ length: 5 }, (_, i) => ({
    id: `bar${i + 1}`,
    number: i + 1,
    area: 'Bar' as TableArea,
    status: 'Available' as TableStatus,
    capacity: 4
  }))
];

const Booking: React.FC = () => {
  const [tables, setTables] = useState<Table[]>(initialTables);
  const [selectedTable, setSelectedTable] = useState<Table | null>(null);
  const [isBookingPanelOpen, setIsBookingPanelOpen] = useState(false);
  const [bookingForm, setBookingForm] = useState<Omit<BookingData, 'area' | 'number'>>({
    customerName: '',
    phone: '',
    email: '',
    time: '',
    date: new Date().toISOString().split('T')[0],
    numberOfGuests: 1,
    specialRequests: '',
    advanceAmount: 0,
    bookingSource: 'Walk-in'
  });

  // Excel handling
  const [excelData, setExcelData] = useState<BookingData[]>([]);
  const excelFileName = 'table_bookings.xlsx';

  useEffect(() => {
    const savedData = localStorage.getItem(excelFileName);
    if (savedData) setExcelData(JSON.parse(savedData));
  }, []);

  const exportToExcel = (data: BookingData) => {
    const updatedData = [...excelData, data];
    const ws = XLSX.utils.json_to_sheet(updatedData.map((d, i) => ({
      '#': i + 1,
      'Table': d.number,
      'Area': d.area,
      'Customer': d.customerName,
      'Phone': d.phone,
      'Guests': d.numberOfGuests,
      'Time': d.time,
      'Date': d.date,
      'Advance': d.advanceAmount,
      'Source': d.bookingSource
    })));
    
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Bookings');
    XLSX.writeFile(wb, excelFileName);
    localStorage.setItem(excelFileName, JSON.stringify(updatedData));
  };

  const handleTableClick = (table: Table) => {
    setSelectedTable(table);
    if (table.status === 'Available') setIsBookingPanelOpen(true);
  };

  const updateTableStatus = (tableId: string, status: TableStatus) => {
    setTables(tables.map(t => t.id === tableId ? { ...t, status } : t));
  };

  const handleBookingSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedTable) return;

    const bookingData: BookingData = {
      ...selectedTable,
      ...bookingForm,
      date: bookingForm.date,
      numberOfGuests: Math.min(bookingForm.numberOfGuests, selectedTable.capacity)
    };

    setTables(tables.map(t => 
      t.id === selectedTable.id ? { 
        ...t, 
        status: 'Occupied',
        reservation: {
          time: bookingForm.time,
          customerName: bookingForm.customerName,
          phone: bookingForm.phone
        }
      } : t
    ));

    exportToExcel(bookingData);
    resetForm();
  };

  const resetForm = () => {
    setBookingForm({
      customerName: '',
      phone: '',
      email: '',
      time: '',
      date: new Date().toISOString().split('T')[0],
      numberOfGuests: 1,
      specialRequests: '',
      advanceAmount: 0,
      bookingSource: 'Walk-in'
    });
    setIsBookingPanelOpen(false);
    setSelectedTable(null);
  };

  return (
    <div className="flex h-screen bg-gray-50">
      {/* Table Grid Section */}
      <div className="flex-1 p-6 overflow-auto">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-3xl font-bold mb-8 flex items-center gap-2">
            <TableIcon className="h-8 w-8 text-blue-600" />
            Restaurant Table Management
          </h1>

          <StatusLegend />

          {AREAS.map(area => (
            <Section key={area} title={area}>
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {tables.filter(t => t.area === area).map(table => (
                  <TableCard
                    key={table.id}
                    table={table}
                    onClick={() => handleTableClick(table)}
                    onStatusChange={updateTableStatus}
                    isSelected={selectedTable?.id === table.id}
                  />
                ))}
                <AddTableButton area={area} onAdd={() => {}} />
              </div>
            </Section>
          ))}
        </div>
      </div>

      {/* Booking Panel */}
      <AnimatePresence>
        {isBookingPanelOpen && selectedTable && (
          <motion.div
            initial={{ x: '100%' }}
            animate={{ x: 0 }}
            exit={{ x: '100%' }}
            transition={{ type: 'spring', stiffness: 300, damping: 30 }}
            className="fixed inset-y-0 right-0 w-full max-w-md bg-white shadow-xl border-l border-gray-200"
          >
            <BookingPanel
              table={selectedTable}
              form={bookingForm}
              onFormChange={setBookingForm}
              onSubmit={handleBookingSubmit}
              onClose={resetForm}
            />
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

// Sub-components
const StatusLegend: React.FC = () => (
  <div className="mb-6 p-4 bg-white rounded-lg shadow-sm">
    <h3 className="text-sm font-semibold mb-3 text-gray-600">TABLE STATUS</h3>
    <div className="flex flex-wrap gap-3">
      {Object.entries(STATUS_COLORS).map(([status, color]) => (
        <div key={status} className="flex items-center gap-2">
          <div className={`w-4 h-4 rounded ${color}`} />
          <span className="text-sm text-gray-700">{status}</span>
        </div>
      ))}
    </div>
  </div>
);

const Section: React.FC<{ title: string; children: React.ReactNode }> = ({ title, children }) => (
  <section className="mb-8">
    <h2 className="text-xl font-semibold mb-4 text-gray-800">{title}</h2>
    {children}
  </section>
);

const TableCard: React.FC<{
  table: Table;
  onClick: () => void;
  onStatusChange: (id: string, status: TableStatus) => void;
  isSelected: boolean;
}> = ({ table, onClick, onStatusChange, isSelected }) => (
  <motion.div
    whileHover={{ scale: 1.02 }}
    className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${
      STATUS_COLORS[table.status]
    } ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
    onClick={onClick}
  >
    <div className="flex justify-between items-center mb-2">
      <span className="font-bold text-lg">#{table.number}</span>
      <select
        value={table.status}
        onChange={(e) => onStatusChange(table.id, e.target.value as TableStatus)}
        className="text-xs px-2 py-1 rounded bg-white border"
        onClick={(e) => e.stopPropagation()}
      >
        {Object.keys(STATUS_COLORS).map((status) => (
          <option key={status} value={status}>{status}</option>
        ))}
      </select>
    </div>
    <div className="text-sm text-gray-600">
      Capacity: {table.capacity}
      {table.reservation && (
        <div className="mt-2 text-xs">
          <p className="truncate">{table.reservation.customerName}</p>
          <p>{table.reservation.time}</p>
        </div>
      )}
    </div>
  </motion.div>
);

const BookingPanel: React.FC<{
  table: Table;
  form: Omit<BookingData, 'area' | 'number'>;
  onFormChange: (data: Omit<BookingData, 'area' | 'number'>) => void;
  onSubmit: (e: React.FormEvent) => void;
  onClose: () => void;
}> = ({ table, form, onFormChange, onSubmit, onClose }) => (
  <div className="h-full flex flex-col">
    <div className="p-6 border-b border-gray-200 flex justify-between items-center">
      <h2 className="text-xl font-bold">Booking Table {table.number}</h2>
      <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
        <XIcon className="h-6 w-6" />
      </button>
    </div>

    <form onSubmit={onSubmit} className="flex-1 overflow-y-auto p-6">
      <div className="space-y-4">
        <InputField
          label="Customer Name"
          value={form.customerName}
          onChange={(v) => onFormChange({ ...form, customerName: v })}
          required
        />
        <InputField
          label="Phone"
          type="tel"
          value={form.phone}
          onChange={(v) => onFormChange({ ...form, phone: v })}
          required
        />
        <InputField
          label="Email"
          type="email"
          value={form.email}
          onChange={(v) => onFormChange({ ...form, email: v })}
        />
        <div className="grid grid-cols-2 gap-4">
          <InputField
            label="Time"
            type="time"
            value={form.time}
            onChange={(v) => onFormChange({ ...form, time: v })}
            required
          />
          <InputField
            label="Date"
            type="date"
            value={form.date}
            onChange={(v) => onFormChange({ ...form, date: v })}
            required
          />
        </div>
        <InputField
          label="Guests"
          type="number"
          min="1"
          max={table.capacity}
          value={form.numberOfGuests.toString()}
          onChange={(v) => onFormChange({ ...form, numberOfGuests: parseInt(v) })}
        />
        <InputField
          label="Advance Amount"
          type="number"
          value={form.advanceAmount.toString()}
          onChange={(v) => onFormChange({ ...form, advanceAmount: parseInt(v) })}
        />
        <SelectField
          label="Booking Source"
          options={['Walk-in', 'Phone', 'Online', 'Third-party']}
          value={form.bookingSource}
          onChange={(v) => onFormChange({ ...form, bookingSource: v })}
        />
        <TextAreaField
          label="Special Requests"
          value={form.specialRequests}
          onChange={(v) => onFormChange({ ...form, specialRequests: v })}
        />
      </div>

      <div className="mt-8 flex gap-4">
        <button
          type="button"
          onClick={onClose}
          className="flex-1 px-4 py-2 bg-gray-100 rounded-lg hover:bg-gray-200"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
        >
          Confirm Booking
        </button>
      </div>
    </form>
  </div>
);

// Utility components
const InputField: React.FC<{
  label: string;
  value: string;
  onChange: (value: string) => void;
} & React.InputHTMLAttributes<HTMLInputElement>> = ({ label, value, onChange, ...props }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <input
      {...props}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
    />
  </div>
);

const TextAreaField: React.FC<{
  label: string;
  value: string;
  onChange: (value: string) => void;
}> = ({ label, value, onChange }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <textarea
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 h-24"
    />
  </div>
);

const SelectField: React.FC<{
  label: string;
  value: string;
  options: string[];
  onChange: (value: string) => void;
}> = ({ label, value, options, onChange }) => (
  <div>
    <label className="block text-sm font-medium text-gray-700 mb-1">{label}</label>
    <select
      value={value}
      onChange={(e) => onChange(e.target.value)}
      className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
    >
      {options.map(option => (
        <option key={option} value={option}>{option}</option>
      ))}
    </select>
  </div>
);

const AddTableButton: React.FC<{ area: TableArea; onAdd: () => void }> = ({ area, onAdd }) => (
  <motion.button
    whileHover={{ scale: 1.05 }}
    className="p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-blue-500 flex flex-col items-center justify-center text-gray-500 hover:text-blue-600"
    onClick={onAdd}
  >
    <PlusIcon className="h-6 w-6 mb-1" />
    <span className="text-sm">Add Table</span>
  </motion.button>
);

export default Booking;